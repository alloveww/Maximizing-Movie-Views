knitr::opts_chunk$set(echo = TRUE)
# libraries
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
library(caret)       # bagging
library(rattle)      # for plotting
library(RColorBrewer)# for plotting
library(lattice)
library(tidyr)
library(lubridate)
library(stringr)
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
library(caret)       # bagging
library(rattle)      # for plotting
library(RColorBrewer)# for plotting
library(lattice)
library(tidyr)
library(lubridate)
library(stringr)
#drop na and select only movies
project<-read.csv("Final_Project_FlixGem.csv")%>%drop_na%>%as_tibble%>%filter(Series.or.Movie=="Movie")
#group Hidden.Gem.score into 17 subgroups
lbls <-
c( '0.5-1.0', '1.0-1.5',  '1.5-2.0',  '2.0-2.5', '2.5-3.0',
'3.0-3.5', '3.5-4.0',  '4.0-4.5',  '4.5-5.0', '5.0-5.5',
'5.5-6.0', '6.0-6.5',  '6.5-7.0',  '7.0-7.5', '7.5-8.0',
'8.0-8.5', '8.5-9.0')
breaks = c(0.5 ,1.0, 1.5 ,2.0 ,2.5 ,3.0 ,3.5 ,4.0 ,
4.5 ,5.0 ,5.5 ,6.0 ,6.5 ,7.0 ,7.5 ,8.0 ,
8.5 ,9.0)
data <-project %>% mutate(HGS_group = cut(
Hidden.Gem.Score,
breaks = breaks,
right = T,
labels = lbls ))
data<-data%>%ungroup()%>%group_by(HGS_group)%>%mutate(Count=n())
data<-data%>%group_by(HGS_group) %>% mutate(Proportion =Count / sum(Count))
ggplot(data, aes(x = HGS_group, y= Proportion, fill = Runtime, width = .8)) +
geom_bar(stat = "identity") +scale_fill_viridis_d() +
xlab("Hidden.Gem.Score")  +labs(title = "Hidden Gem Score vs Runtime")+
theme(axis.text.x = element_text(angle = 90))
#too many languages, manipulation with the languages here..
temp <- drop_na(project)[c("Languages")] %>% unique()
input_fun <-
function(x) {#helper function 1: split the string
str_split(x, ", ")
}
unique_language <-
lapply(temp, input_fun) %>% unlist() %>% unique()
length(unique_language)
#there are total 121 unique languages, now we group the languages
#select top six most spoken languages into 6 different groups and rest languages into a single group
Lgroup1 <- c("English")
Lgroup2 <- c("Spanish")
Lgroup3 <- c("French")
Lgroup4 <- c("Hindi")
Lgroup5 <- c("Chinese")
Lgroup6 <- c("Arabic")
Lgroup7 <-
unique_language[!unique_language %in% c("English", "Spanish", "French", "Hindi", "Chinese", "Arabic")]
input_fun2 <-
function(x, g1, g2, g3, g4, g5, g6, g7) {
# helper function 2: x is the original language group and return the new language group!
TF_array7 <- input_fun(x) %>% unlist() %in% g7
TF_array6 <- input_fun(x) %>% unlist() %in% g6
TF_array5 <- input_fun(x) %>% unlist() %in% g5
TF_array4 <- input_fun(x) %>% unlist() %in% g4
TF_array3 <- input_fun(x) %>% unlist() %in% g3
TF_array2 <- input_fun(x) %>% unlist() %in% g2
TF_array1 <- input_fun(x) %>% unlist() %in% g1
if (TRUE %in% TF_array7) { return("Rare_Language") }
if (TRUE %in% TF_array6) { return("Arabic")}
if (TRUE %in% TF_array5) { return("Chinese")}
if (TRUE %in% TF_array4) { return("Hindi")}
if (TRUE %in% TF_array3) { return("French")}
if (TRUE %in% TF_array2) { return("Spanish") }
if (TRUE %in% TF_array1) { return("English") }
}
for (i in 1:length(data$Languages)) {
#loop around the char vector and change every single cell!
data$Languages[i] <-
input_fun2(
data$Languages[i], Lgroup1, Lgroup2,Lgroup3, Lgroup4, Lgroup5,
Lgroup6, Lgroup7
)
}
#languages manipulation ends here, now plot!
ggplot(data, aes(x = HGS_group, y= Proportion, fill = Languages, width = .8)) +
geom_bar(stat = "identity") +scale_fill_viridis_d() +
xlab("Hidden.Gem.Score") + labs(title = "Hidden Gem Score vs Langauges")+
theme(axis.text.x = element_text(angle = 90))
ggplot(project,aes(x=Hidden.Gem.Score,y=Rotten.Tomatoes.Score))+geom_bin2d(bins=100)+geom_smooth() +
labs(title = "Hidden Gem Score vs Rotten Tomatoes Score",
x = "Hidden Gem Score", y = "Rotten Tomatoes Score")
ggplot(project,aes(x=Hidden.Gem.Score,y=Metacritic.Score))+geom_bin2d(bins=100)+geom_smooth()+
labs(title = "Hidden Gem Score vs Metacritic Score",
x = "Hidden Gem Score", y = "Metacritic Score")
ggplot(project,aes(x=Hidden.Gem.Score,y=IMDb.Score))+geom_bin2d(bins=100)+geom_smooth() +
labs(title = "Hidden Gem Score vs IMDb Score",
x = "Hidden Gem Score", y = "IMDb Score")
# x-axis: Release Date,
# y-axis: HGS,
# three graphs corresponding to the different Runtime
ggplot(project, aes(x = Release.Date, y = Hidden.Gem.Score)) +
geom_point(aes(color = Runtime)) + facet_grid('Runtime') +
labs(title = "Hidden Gem Score Over Time by Runtime",
x = "Release Date", y = "Hidden Gem Score")
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
reg_tree<-rpart(Hidden.Gem.Score ~.,
data=task2_df,
method="anova",
control = list(cp = 0, xval = 10)
)
fancyRpartPlot(reg_tree)
pred <- predict(reg_tree, newdata = task2_df)
RMSE(pred = pred, obs = ames_test$Sale_Price)
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
reg_tree<-rpart(Hidden.Gem.Score ~.,
data=task2_df,
method="anova",
control = list(cp = 10)
)
fancyRpartPlot(reg_tree)
pred <- predict(reg_tree, newdata = task2_df)
#RMSE(pred = pred, obs = ames_test$Sale_Price)
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
reg_tree<-rpart(Hidden.Gem.Score ~.,
data=task2_df,
method="anova",
control = list(cp = 2000)
)
fancyRpartPlot(reg_tree)
pred <- predict(reg_tree, newdata = task2_df)
#RMSE(pred = pred, obs = ames_test$Sale_Price)
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
reg_tree<-rpart(Hidden.Gem.Score ~.,
data=task2_df,
method="anova"
)
fancyRpartPlot(reg_tree)
pred <- predict(reg_tree, newdata = task2_df)
#RMSE(pred = pred, obs = ames_test$Sale_Price)
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
reg_tree<-rpart(Hidden.Gem.Score ~.,
data=task2_df,
method="anova"
)
fancyRpartPlot(reg_tree)
pred <- predict(optimal_tree, newdata = data)
#select predictors
task2_df<-data%>%ungroup()%>%
select("Languages","Runtime","Metacritic.Score","IMDb.Score",
"Rotten.Tomatoes.Score","Hidden.Gem.Score")
reg_tree<-rpart(Hidden.Gem.Score ~.,
data=task2_df,
method="anova"
)
fancyRpartPlot(reg_tree)
pred <- predict(reg_tree, newdata = data)
RMSE(pred = pred, obs = data$Hidden.Gem.Score)
